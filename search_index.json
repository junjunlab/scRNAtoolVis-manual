[["index.html", "The documentation of scRNAtoolVis package Chapter 1 About Lao Junjun", " The documentation of scRNAtoolVis package Junjun Lao 2022-10-08 Chapter 1 About Lao Junjun If you are interested in my works, welcome to browse my github: https://github.com/junjunlab. "],["intro.html", "Chapter 2 Introduction 2.1 Installation", " Chapter 2 Introduction This scRNAtoolVis package is mainly used to visualize scRNA-seq related figures to produce some elegant plots. 2.1 Installation You can install the development version of scRNAtoolVis like so: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;junjunlab/scRNAtoolVis&quot;) "],["clustercorneraxes.html", "Chapter 3 clusterCornerAxes 3.1 load test data 3.2 examples 3.3 add circle", " Chapter 3 clusterCornerAxes clusterCornerAxes is used to add corner axis on the left-bottom UMAP/tSNE principle component plot. 3.1 load test data We load test data in scRNAtoolVis package: library(scRNAtoolVis) # load test data test &lt;- system.file(&quot;extdata&quot;, &quot;seuratTest.RDS&quot;, package = &quot;scRNAtoolVis&quot;) tmp &lt;- readRDS(test) 3.2 examples default plot: # umap clusterCornerAxes(object = tmp,reduction = &#39;umap&#39;, noSplit = T) We can change arrow type: # arrowType clusterCornerAxes(object = tmp,reduction = &#39;umap&#39;, noSplit = T,arrowType = &#39;open&#39;) We can facet by seurat metadata column catogary variable: # facet by metadata column &quot;orig.ident&quot; clusterCornerAxes(object = tmp, reduction = &#39;umap&#39;, noSplit = F, groupFacet = &#39;orig.ident&#39;, aspect.ratio = 1, relLength = 0.5) If multiple corner axises will confuse you, you can also set axes = ‘one’ to retain only one axis on the left: # retain only one axes clusterCornerAxes(object = tmp, reduction = &#39;umap&#39;, noSplit = F, groupFacet = &#39;orig.ident&#39;, aspect.ratio = 1, relLength = 0.5, axes = &#39;one&#39;) Change the axis and label color: # line color clusterCornerAxes(object = tmp, reduction = &#39;umap&#39;, noSplit = F, groupFacet = &#39;orig.ident&#39;, aspect.ratio = 1, relLength = 0.5, lineTextcol = &#39;grey50&#39;) Use tSNE reduction data: # tsne clusterCornerAxes(object = tmp, reduction = &#39;tsne&#39;, noSplit = F, groupFacet = &#39;orig.ident&#39;, aspect.ratio = 1, relLength = 0.5) Change a cool theme: clusterCornerAxes(object = tmp, reduction = &#39;umap&#39;, noSplit = F, groupFacet = &#39;orig.ident&#39;, aspect.ratio = 1, relLength = 0.5, cornerTextSize = 2, themebg = &#39;bwCorner&#39;) You can set the keySize to change legend size: # legend key size clusterCornerAxes(object = tmp, reduction = &#39;umap&#39;, clusterCol = &#39;cellType&#39;, noSplit = T, keySize = 8) Add cellType names in plot: # add cell type clusterCornerAxes(object = tmp, reduction = &#39;umap&#39;, clusterCol = &quot;cellType&quot;, noSplit = T, cellLabel = T, cellLabelSize = 5) Remove legend: # remove legend clusterCornerAxes(object = tmp, reduction = &#39;umap&#39;, clusterCol = &quot;cellType&quot;, noSplit = T, cellLabel = T, cellLabelSize = 5, show.legend = F) Split by group: # split clusterCornerAxes(object = tmp, reduction = &#39;umap&#39;, clusterCol = &quot;cellType&quot;, groupFacet = &#39;orig.ident&#39;, noSplit = F, cellLabel = T, cellLabelSize = 3, show.legend = F, aspect.ratio = 1, themebg = &#39;bwCorner&#39;) 3.3 add circle You can add circles to each clusters to mark: # add circle clusterCornerAxes(object = tmp,reduction = &#39;umap&#39;, noSplit = T, cornerTextSize = 3.5, themebg = &#39;bwCorner&#39;, addCircle = TRUE, cicAlpha = 0.2, nbin = 200) Relative parameters to control the circle as follows: "],["featurecorneraxes.html", "Chapter 4 FeatureCornerAxes 4.1 examples", " Chapter 4 FeatureCornerAxes FeatureCornerAxes is used to add corner axis on the left-bottom UMAP/tSNE Featureplot function from seurat plot to view gene expressions. 4.1 examples See the default plot: # default FeatureCornerAxes(object = tmp,reduction = &#39;umap&#39;, groupFacet = &#39;orig.ident&#39;, relLength = 0.5, relDist = 0.2, features = c(&quot;Actb&quot;,&quot;Ythdc1&quot;, &quot;Ythdf2&quot;)) Remove legend: # remove legend FeatureCornerAxes(object = tmp,reduction = &#39;umap&#39;, groupFacet = &#39;orig.ident&#39;, relLength = 0.5, relDist = 0.2, features = c(&quot;Actb&quot;,&quot;Ythdc1&quot;, &quot;Ythdf2&quot;), show.legend = F) If we do not split the plot by group, we can set groupFacet = NULL: # no facet group FeatureCornerAxes(object = tmp,reduction = &#39;umap&#39;, groupFacet = NULL, relLength = 0.5, relDist = 0.2, features = c(&quot;Actb&quot;,&quot;Ythdc1&quot;, &quot;Ythdf2&quot;), aspect.ratio = 1) We can specify a group to change the corner axis position: # specify corner position p1 &lt;- FeatureCornerAxes(object = tmp,reduction = &#39;umap&#39;, groupFacet = &#39;orig.ident&#39;, relLength = 0.5, relDist = 0.2, aspect.ratio = 1, features = c(&quot;Actb&quot;,&quot;Ythdc1&quot;, &quot;Ythdf2&quot;), axes = &#39;one&#39;) p2 &lt;- FeatureCornerAxes(object = tmp,reduction = &#39;umap&#39;, groupFacet = &#39;orig.ident&#39;, relLength = 0.5, relDist = 0.2, aspect.ratio = 1, features = c(&quot;Actb&quot;,&quot;Ythdc1&quot;, &quot;Ythdf2&quot;), axes = &#39;one&#39;, cornerVariable = &#39;ST4&#39;) # combine cowplot::plot_grid(p1,p2,ncol = 2,align = &#39;hv&#39;) Besides, we can set the color bar value range: # given a range to plot p1 &lt;- FeatureCornerAxes(object = tmp,reduction = &#39;umap&#39;, groupFacet = NULL, relLength = 0.5, relDist = 0.2, features = c(&quot;Actb&quot;,&quot;Ythdc1&quot;, &quot;Ythdf2&quot;), aspect.ratio = 1, themebg = &#39;bwCorner&#39;) p2 &lt;- FeatureCornerAxes(object = tmp,reduction = &#39;umap&#39;, groupFacet = NULL, relLength = 0.5, relDist = 0.2, features = c(&quot;Actb&quot;,&quot;Ythdc1&quot;, &quot;Ythdf2&quot;), aspect.ratio = 1, themebg = &#39;bwCorner&#39;, minExp = 0,maxExp = 2) # combine cowplot::plot_grid(p1,p2,ncol = 1,align = &#39;hv&#39;) "],["averageheatmap.html", "Chapter 5 AverageHeatmap 5.1 load data 5.2 examples", " Chapter 5 AverageHeatmap AverageHeatmap is used to plot averaged expression cross cluster cells. 5.1 load data httest &lt;- system.file(&quot;extdata&quot;, &quot;htdata.RDS&quot;, package = &quot;scRNAtoolVis&quot;) pbmc &lt;- readRDS(httest) # load markergene markergene &lt;- system.file(&quot;extdata&quot;, &quot;top5pbmc.markers.csv&quot;, package = &quot;scRNAtoolVis&quot;) markers &lt;- read.table(markergene, sep = &#39;,&#39;, header = TRUE) 5.2 examples default plot: # plot AverageHeatmap(object = pbmc, markerGene = markers$gene) change color: # change color AverageHeatmap(object = pbmc, markerGene = markers$gene, htCol = c(&quot;#339933&quot;, &quot;#FFCC00&quot;, &quot;#FF0033&quot;)) Supporting with your own cluster colors by annoCol = TRUE and myanCol: # change annotation color library(&quot;scales&quot;) library(ggsci) mycol &lt;- hue_pal()(9) mycol1 &lt;- pal_npg()(9) # plot AverageHeatmap(object = pbmc, markerGene = markers$gene, annoCol = TRUE, myanCol = mycol) + AverageHeatmap(object = pbmc, markerGene = markers$gene, annoCol = TRUE, myanCol = mycol1) Remove rownames: # remove rownames AverageHeatmap(object = pbmc, markerGene = markers$gene, showRowNames = F) Remove annotation name: # remove cluster anno name AverageHeatmap(object = pbmc, markerGene = markers$gene, clusterAnnoName = F) Mark some important genes: # mark some genes # tartget gene annoGene &lt;- c(&quot;LDHB&quot;,&quot;CCR7&quot;,&quot;LEF1&quot;,&quot;NKG7&quot;,&quot;CST7&quot;, &quot;GZMK&quot;,&quot;HLA-DQA1&quot;,&quot;HLA-DRB1&quot;,&quot;HLA-DPA1&quot;) AverageHeatmap(object = pbmc, markerGene = markers$gene, clusterAnnoName = F, showRowNames = F, markGenes = annoGene) You can change heatmap width and height: # change heatmap width and height AverageHeatmap(object = pbmc, markerGene = markers$gene, clusterAnnoName = F, width = 8,height = 16) "],["markervocalno.html", "Chapter 6 markerVocalno 6.1 examples", " Chapter 6 markerVocalno markerVocalno is used to plot vocalno-plot for marker genes. 6.1 examples test &lt;- system.file(“extdata”, “pbmc.markers.csv”, package = “scRNAtoolVis”) markers &lt;- read.csv(test) # plot markerVocalno(markers = markers, topn = 5, labelCol = ggsci::pal_npg()(9)) "],["jjdotplot.html", "Chapter 7 jjDotPlot 7.1 Load test data 7.2 Supply with genes 7.3 Supply with marker gene 7.4 inherite annoSegment args 7.5 Split by multiple groups 7.6 Order 7.7 End", " Chapter 7 jjDotPlot The scRNAtoolVis supplies a jjDotPlot function to visualize gene expressions in an elegant way. 7.1 Load test data library(scRNAtoolVis) httest &lt;- system.file(&quot;extdata&quot;, &quot;htdata.RDS&quot;, package = &quot;scRNAtoolVis&quot;) pbmc &lt;- readRDS(httest) # add groups pbmc$groups &lt;- rep(c(&#39;stim&#39;,&#39;control&#39;),each = 1319) # add celltype pbmc$celltype &lt;- Seurat::Idents(pbmc) # load markergene data(&quot;top3pbmc.markers&quot;) # check head(top3pbmc.markers,3) # # A tibble: 3 x 7 # # Groups: cluster [1] # vvp_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene # &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; # 1 1.74e-109 1.07 0.897 0.593 2.39e-105 Naive CD4 T LDHB # 2 1.17e- 83 1.33 0.435 0.108 1.60e- 79 Naive CD4 T CCR7 # 3 3.28e- 49 1.05 0.333 0.103 4.50e- 45 Naive CD4 T LEF1 7.2 Supply with genes You can only supply gene names to visulaize gene expressions: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene) We can use celltype in the metadata to mark celltypes: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, id = &#39;celltype&#39;) Add dendrogram to genes using xtree: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, xtree = T) Rescale the gene expressions in a given range: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, xtree = T, rescale = T, rescale.min = 0, rescale.max = 1) You can change the point shape: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, xtree = T, rescale = T, rescale.min = 0, rescale.max = 1, point.shape = 22) Add geom_tile instead of geom_point: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, xtree = T, rescale = T, rescale.min = 0, rescale.max = 1, point.geom = F, tile.geom = T) Rescale to -2-2: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, xtree = T, rescale = T, dot.col = c(&#39;blue&#39;,&#39;white&#39;,&#39;red&#39;), rescale.min = -2, rescale.max = 2, midpoint = 0) 7.3 Supply with marker gene You can supply marker genes including gene and celltype column information from FindAllMarkers to visulaize gene expressions: jjDotPlot(object = pbmc, markerGene = top3pbmc.markers) You can also add dendrogram: jjDotPlot(object = pbmc, markerGene = top3pbmc.markers, xtree = T) Add celltype annotations for gene: jjDotPlot(object = pbmc, markerGene = top3pbmc.markers, anno = T, plot.margin = c(3,1,1,1)) Showing using heatmap: jjDotPlot(object = pbmc, markerGene = top3pbmc.markers, anno = T, plot.margin = c(3,1,1,1), point.geom = F, tile.geom = T) Change tree position using tree.pos and combine tree labels using same.pos.label: jjDotPlot(object = pbmc, markerGene = top3pbmc.markers, anno = T, plot.margin = c(3,1,1,1), tree.pos = &#39;left&#39;, same.pos.label = T) 7.4 inherite annoSegment args You can pass other annoSegment parameters to ajust annotations of jjAnno pakcage: jjDotPlot(object = pbmc, markerGene = top3pbmc.markers, anno = T, plot.margin = c(3,1,1,1), tree.pos = &#39;left&#39;, same.pos.label = T, yPosition = 10.3) 7.5 Split by multiple groups You can also visualize genes across multiple groups using split.by: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, id = &#39;celltype&#39;, split.by = &#39;groups&#39;, dot.col = c(&#39;#0099CC&#39;,&#39;#CC3333&#39;)) Set split.by.aesGroup = T to turn off the colors grouped by groups: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, id = &#39;celltype&#39;, split.by = &#39;groups&#39;, split.by.aesGroup = T) Add heatmap: jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, id = &#39;celltype&#39;, split.by = &#39;groups&#39;, split.by.aesGroup = T, point.geom = F, tile.geom = T) 7.6 Order Supply with your own gene or cluster orders to plot: # change gene order jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, gene.order = rev(top3pbmc.markers$gene)) You should turn off the ytree when you change cluster orders: # change cluster order jjDotPlot(object = pbmc, gene = top3pbmc.markers$gene, gene.order = rev(top3pbmc.markers$gene), cluster.order = 8:0, ytree = F) 7.7 End More args see: ?jjDotPlot "],["jjvolcano.html", "Chapter 8 jjVolcano 8.1 Basic examples 8.2 Layout", " Chapter 8 jjVolcano jjVolcano function can be used to visualize marker genes in multiple clusters. 8.1 Basic examples Load test data: library(scRNAtoolVis) # test data(&#39;pbmc.markers&#39;) # check head(pbmc.markers,3) # p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene # RPS12 2.008629e-140 0.7256738 1.000 0.991 2.754633e-136 Naive CD4 T RPS12 # RPS27 2.624075e-140 0.7242847 0.999 0.992 3.598656e-136 Naive CD4 T RPS27 # RPS6 1.280169e-138 0.6742630 1.000 0.995 1.755623e-134 Naive CD4 T RPS6 plot: # plot jjVolcano(diffData = pbmc.markers) Ajustlog2FC.cutoff,col.typeandtopGeneN: # change aes color type jjVolcano(diffData = pbmc.markers, log2FC.cutoff = 0.5, col.type = &quot;adjustP&quot;, topGeneN = 3) Supply with own genes: # supply own genes mygene &lt;- c(&#39;LTB&#39;,&#39;CD79B&#39;,&#39;CCR7&#39;,&#39;GNLY&#39;) jjVolcano(diffData = pbmc.markers, myMarkers = mygene) Change point color: # change point color jjVolcano(diffData = pbmc.markers, aesCol = c(&#39;purple&#39;,&#39;orange&#39;)) Change rect fill color: # change cluster rect color jjVolcano(diffData = pbmc.markers, tile.col = corrplot::COL2(&#39;RdBu&#39;, 15)[4:12]) Other about gene text aruments can be passed by geom_text_repel: # cluster label arguments passed to geom_text_repel jjVolcano(diffData = pbmc.markers, tile.col = corrplot::COL2(&#39;RdBu&#39;, 15)[4:12], size = 3.5, fontface = &#39;italic&#39;) Ajust cluster orders by cluster.order: # ajust cluster orders jjVolcano(diffData = pbmc.markers, tile.col = corrplot::COL2(&#39;PuOr&#39;, 15)[4:12], size = 3.5, fontface = &#39;italic&#39;, cluster.order = rev(unique(pbmc.markers$cluster))) 8.2 Layout flip = T to rotate the plot: # flip the plot jjVolcano(diffData = pbmc.markers, tile.col = corrplot::COL2(&#39;PiYG&#39;, 15)[4:12], size = 3.5, fontface = &#39;italic&#39;, legend.position = c(0.8,0.2), flip = T) polar = T to draw a polar plot: # make a polar plot jjVolcano(diffData = pbmc.markers, tile.col = corrplot::COL2(&#39;RdBu&#39;, 15)[4:12], size = 3.5, fontface = &#39;italic&#39;, polar = T) Expand the limits: # expand limits jjVolcano(diffData = pbmc.markers, tile.col = corrplot::COL2(&#39;RdYlBu&#39;, 15)[4:12], size = 3.5, fontface = &#39;italic&#39;, polar = T) + ylim(-8,10) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
